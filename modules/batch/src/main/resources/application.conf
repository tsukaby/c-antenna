# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret = "%APPLICATION_SECRET%"

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Root logger:
logger.root = INFO

# Logger provided to your application:
logger.application = INFO

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
db.default.driver = com.mysql.jdbc.Driver
db.default.url = "jdbc:mysql://localhost:3306/c_antenna?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
db.default.user = "root"
db.default.password = ""

# ScalikeJDBC original configuration

db.default.poolInitialSize = 50
db.default.poolMaxSize = 50
#db.default.poolValidationQuery=

scalikejdbc.global.loggingSQLAndTime.enabled = true
scalikejdbc.global.loggingSQLAndTime.singleLineMode = true
scalikejdbc.global.loggingSQLAndTime.logLevel = debug
scalikejdbc.global.loggingSQLAndTime.warningEnabled = true
scalikejdbc.global.loggingSQLAndTime.warningThresholdMillis = 1000
scalikejdbc.global.loggingSQLAndTime.warningLogLevel = warn

#scalikejdbc.play.closeAllOnStop.enabled=true

# scalikejdbc logging
logger.scalikejdbc = INFO

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = DEBUG
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    default-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"

      fork-join-executor {
        parallelism-min = 12
        parallelism-factor = 5.0
        parallelism-max = 32
      }

      thread-pool-executor {
        keep-alive-time = 60s
        core-pool-size-min = 12
        core-pool-size-factor = 5.0
        core-pool-size-max = 32
        max-pool-size-min = 12
        max-pool-size-factor = 5.0
        max-pool-size-max = 32
        task-queue-size = -1
        task-queue-type = "linked"

        allow-core-timeout = on
      }
    }
  }
}
akka.default-dispatcher.fork-join-executor.pool-size-max = 64
akka.actor.debug.receive = on

spray.can {
  client {
    response-chunk-aggregation-limit = 0
  }
}

kamon.datadog.application-name = "c-antenna-batch"

// Docker host ip
kamon.datadog.hostname = ${?DD_AGENT_IP}

kamon.metric {
  filters {
    akka-actor {
      includes = [ "**" ]
      excludes = [ "c-antenna-batch/system/**", "c-antenna-batch/user/IO-**" ]
    }
    trace {
      includes = [ "**" ]
      excludes = []
    }
    akka-dispatcher {
      includes = [ "c-antenna-batch/akka.actor.default-dispatcher" ]
      excludes = []
    }
  }
}
