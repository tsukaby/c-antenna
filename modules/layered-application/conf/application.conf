# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret = "%APPLICATION_SECRET%"

# The application languages
# ~~~~~
application.langs = "ja"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root = DEBUG

# Logger used by the framework:
logger.play = DEBUG

# Logger provided to your application:
logger.application = DEBUG

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
db.default.driver = com.mysql.jdbc.Driver
db.default.url = "jdbc:mysql://localhost:3306/C_ANTENNA?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
db.default.user = "root"
db.default.password = ""

# ScalikeJDBC original configuration

db.default.poolInitialSize = 10
db.default.poolMaxSize = 50
#db.default.poolValidationQuery=

scalikejdbc.global.loggingSQLAndTime.enabled = false
scalikejdbc.global.loggingSQLAndTime.singleLineMode = true
scalikejdbc.global.loggingSQLAndTime.logLevel = debug
scalikejdbc.global.loggingSQLAndTime.warningEnabled = true
scalikejdbc.global.loggingSQLAndTime.warningThresholdMillis = 1000
scalikejdbc.global.loggingSQLAndTime.warningLogLevel = warn

#scalikejdbc.play.closeAllOnStop.enabled=true

# You can disable the default DB plugin
# Otherwise, don't disable dbplugin when you use scalikejdbc-play-dbplugin-adapter
dbplugin = disabled
evolutionplugin = disabled

# scalikejdbc logging
logger.scalikejdbc = DEBUG

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  loglevel = DEBUG
}

play {
  akka {
    event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
    loglevel = WARNING

    actor {
      deployment {
        /actions {
          router = round-robin
          nr-of-instances = 1024
        }

        /promises {
          router = round-robin
          nr-of-instances = 24
        }
      }

      retrieveBodyParserTimeout = 5 second
      actions-dispatcher = {
        fork-join-executor {
          # Min number of threads to cap factor-based parallelism number to
          parallelism-min = 40
          # The parallelism factor is used to determine thread pool size using the
          # following formula: ceil(available processors * factor). Resulting size
          # is then bounded by the parallelism-min and parallelism-max values.
          parallelism-factor = 3.0
          # Max number of threads to cap factor-based parallelism number to
          parallelism-max = 256
        }
      }

      promises-dispatcher = {
        fork-join-executor {
          parallelism-factor = 1.0
          parallelism-max = 24
        }
      }

      websockets-dispatcher = {
        fork-join-executor {
          parallelism-factor = 1.0
          parallelism-max = 24
        }
      }

      default-dispatcher = {
        fork-join-executor {
          parallelism-factor = 1.0
          parallelism-max = 24
        }
      }
    }
  }
}


spray.can {
  client {
    response-chunk-aggregation-limit = 0
  }
}
